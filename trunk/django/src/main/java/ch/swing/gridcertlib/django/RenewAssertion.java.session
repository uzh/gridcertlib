package ch.swing.gridcertlib.django;
 
import java.util.Properties;
import java.io.InputStream;
import java.io.IOException;
import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

 
/** Force SP session logout and then login again, finally redirect
 * browser to the address specified in the `return` query parameter.
 * Logging out of the SP session and then in again ensures that we get
 * a fresh SAML assertion from the IdP; when the IdP session expires,
 * this will actually prompt the user for a new login procedure.
 *
 * Final redirect via the `return` parameter is provided so that only
 * this servlet needs to be Shibboleth-protected, whereas the majority
 * of portal pages can just use the native session management
 * protocol.
 *
 * In detail, this servlet does the following:<ol>
 * <li>Set a cookie with the return URL in it;
 * <li>Redirect browser to the {@code http://.../Shibboleth.sso/Logout} URL,
 *     forcing SP session logout, asking for return to this servlet's URL;
 * <li>The {@code Logout} page redirects back to this servlet, which
 *     is Shibboleth-protected, so the SP initiates a new session and 
 *     gets a fresh assertion from the IdP;
 * <li>Read the return URL from the cookie, and redirect browser
 *     to that URL.
 * </ol>
 * 
 * The following servelt init parameters are required:<ul>
 * <li>{@code HomeURL} URL where client browsers are redirected to by default (can be overridden by the query parameter {@code return})
 * <li>{@code ShibbolethLogoutURL} URL to initiate Shibboleth SP session logout (usually, this is {@code http://hostname/Shibboleth.sso/Logout})
 * <li>{@code RenewAssertionURL} visible URL of this servlet (may be different from the one returned by the servlet container's `getRequestURL()` because of proxying)
 * </ul>
 */ 
public class RenewAssertion extends HttpServlet
{
    protected static final String RETURN_URL_ATTRIBUTE_NAME = "org.swing.gridcertlib.servlet.RenewAssertion.return";

    /** The URL of the default redirection page. A browser is redirected here if no return URL is specified. */
    protected String homeUrl_;

    /** The URL to the Shibboleth SP logout request. Usually {@code http://hostname/Shibboleth.sso/Logout} */
    protected String logoutUrl_;

    /** The visible URL of this servlet. (We cannot get this from
     * `getRequestURL()` because there can be proxying.) 
     */
    protected String selfUrl_;

    protected ServletContext ctx_;

    public void init(ServletConfig conf) 
        throws ServletException 
    {
        ctx_ = conf.getServletContext();

        try {
            homeUrl_ = getRequiredInitParameter(conf, "HomeURL");
            logoutUrl_ = getRequiredInitParameter(conf, "ShibbolethLogoutURL");
            selfUrl_ = getRequiredInitParameter(conf, "RenewAssertionURL");
        }
        catch (NoSuchFieldException x) {
            throw new ServletException("Missing required init parameter '" + x.getMessage() + "'");
        };
        
        super.init(conf);
     }

    protected void doGet(HttpServletRequest request, HttpServletResponse response) 
        throws ServletException, IOException
    {
        HttpSession session = request.getSession(true);

        // is the browser returning here after logout/login?
        final String finalDestinationUrl = (String)request.getAttribute(RETURN_URL_ATTRIBUTE_NAME);
        if (null == finalDestinationUrl) {
            // new visit, set return cookie and redirect
            String returnUrl = request.getParameter("return");
            if (null == returnUrl) {
                ctx_.log("RenewAssertion: no return address gotten from referer, returning to " + homeUrl_);
                returnUrl = homeUrl_;
            } 
            else
                ctx_.log("RenewAssertion: referer asked for return address " + returnUrl);
            session.setAttribute(RETURN_URL_ATTRIBUTE_NAME, returnUrl);

            final String redirectUrl = logoutUrl_ + "?return=" + selfUrl_;
            ctx_.log("RenewAssertion: initiating logout, redirecting to " + redirectUrl);
            response.setStatus(HttpServletResponse.SC_MOVED_TEMPORARILY);
            response.addHeader("Location", redirectUrl);
            response.setContentType("text/html");
            response.getWriter()
                .println("<html><body>"
                         + "Renewing authorization data, please click <a href=\"" 
                         + redirectUrl
                         + "\">here</a> to continue."
                         + "</body></html>");
        }
        else {
            // coming back, delete return cookie and redirect to caller address
            ctx_.log("RenewAssertion: returning client, redirect to " + finalDestinationUrl);
            response.setStatus(HttpServletResponse.SC_MOVED_TEMPORARILY);
            response.addHeader("Location", finalDestinationUrl);
            response.setContentType("text/html");
            response.getWriter()
                .println("<html><body>"
                         + "Renewed authorization data, please click <a href=\"" 
                         + finalDestinationUrl
                         + "\">here</a> to continue."
                         + "</body></html>");
        }
    }

    protected String getRequiredParameter(final HttpServletRequest request, 
                                          final String name)
        throws NoSuchFieldException
    {
        final String result = request.getParameter(name);
        if (null == result)
            throw new NoSuchFieldException(name);
        else
            return result;
    }

    protected String getRequiredInitParameter(final ServletConfig conf, 
                                              final String name)
        throws NoSuchFieldException
    {
        final String result = conf.getInitParameter(name);
        if (null == result)
            throw new NoSuchFieldException(name);
        else
            return result;
    }

    protected void throwError(final String source, final String message) 
        throws ServletException
    {
        ctx_.log(source + ": ERROR: " + message);
        throw new ServletException(message);
    }
}
